{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83e\udde0 Smart Task Management System A full-stack, production-ready Microservices-based solution powered by .NET Core 8 , Azure , RabbitMQ , IdentityCore , and ASP.NET Core MVC . \ud83d\udcc1 Solution Structure /SmartTaskSolution \u2502 \u251c\u2500\u2500 /Services \u2502 \u251c\u2500\u2500 /AuthService (.NET 8 + IdentityCore) \u2502 \u251c\u2500\u2500 /TaskService (.NET 8 + EF Core) \u2502 \u251c\u2500\u2500 /NotificationSvc (.NET 8 + RabbitMQ + Azure Function) \u2502 \u251c\u2500\u2500 /ReminderService (Azure Function) \u2502 \u2514\u2500\u2500 /Gateway (.NET 8 + Ocelot) \u2502 \u251c\u2500\u2500 /Frontend (ASP.NET Core MVC + Bootstrap) \u251c\u2500\u2500 /Shared (DTOs, Common Utils) \u2514\u2500\u2500 /Docs (This checklist) \ud83c\udf10 Microservices API Chart Service Name Port Key Endpoints Description API Gateway 5000 /api/* Ocelot routing layer Auth Service 5001 /login , /register JwtBearer, IdentityCore Task Service 5002 /task/create , /assign , /update Task operations + RabbitMQ emit Notification Service 5003 (RabbitMQ consumer) Task notification trigger Reminder Service 5004 (Azure Bus listener) Email on task inactivity Frontend MVC 5005 /login , /dashboard , /tasks UI views with Razor & Bootstrap \ud83c\udf10 API Architecture Plan A high-level overview of how each microservice interacts in the Smart Task Management System. \ud83d\udd01 Service Interaction Map - Architecture Plan \ud83d\udccc Each arrow represents the direction and type of communication between services. Ports are labeled for service accessibility through the Gateway. \ud83d\udccc All services are stateless, decoupled, and accessed via the API Gateway with secure JWT tokens. \ud83d\uddfa\ufe0f Microservices (API) Endpoint Map Service Port Method Endpoint Description API Gateway 5000 ALL /api/* Aggregator & router Auth Service 5001 POST /login Authenticate & issue JWT POST /register Create user with role Task Service 5002 POST /task/create Create new task POST /task/assign Assign user to task PUT /task/status/update Update task status GET /task/{id} Get task by ID Notification Service 5003 EVENT task.events (RabbitMQ) Emits & listens to task changes Reminder Service 5004 TIMER/EVENT \u2014 Checks task inactivity Azure Function Email \u2014 TRIGGER emailQueue (Service Bus) Sends assignment/reminder email MVC Frontend 5005 GET/POST /login , /dashboard UI layer for all services \ud83d\udd12 All /api/* routes are protected via JWT and forwarded through Ocelot Gateway. RabbitMQ and Azure Service Bus operate independently of HTTP flows. \ud83d\udd10 JWT Flow Summary User logs in via /login (Auth Service) Auth Service returns JWT token with embedded claims Client sends token to Gateway Gateway forwards request with token to appropriate service \ud83d\udcec Messaging Flow RabbitMQ Producer: Task Service Exchange: task.exchange Queue: task.events Consumer: Notification Service Azure Service Bus Trigger: Notification or Reminder Service Queue: emailQueue Consumer: Azure Function (Email Dispatch) \ud83e\uddec Entity Relationship Overview: Normalized & Indexed \u2705 Includes primary/foreign keys, normalized entities, and suggested indexes for optimized querying. \u2705 Implementation Checklist \ud83d\udcc1 Planning [ ] Define BRD and scope [ ] Design database schemas for each microservice [ ] Allocate service ports & API chart [ ] Communication breakdown map (RabbitMQ + Azure Bus) \ud83d\udd0c API Development Auth Service [ ] JwtBearer token via /login [ ] User registration /register [ ] IdentityCore setup + roles [ ] Claims embedded in token Task Service [ ] /task/create , /assign , /update [ ] Push event to RabbitMQ Notification Service [ ] RabbitMQ subscription [ ] Forward to Azure Service Bus [ ] Trigger Azure Function \u2192 send email Reminder Service [ ] Track inactivity via timers/calendar [ ] Azure Bus \u2192 send reminder email Gateway [ ] Ocelot routing + policies [ ] JWT validation \ud83c\udfa8 Frontend (MVC App) [ ] Login/Register Razor Views [ ] Bootstrap 5 theme [ ] Task dashboard & creation UI [ ] Reminder interval UI [ ] DI via IHttpClientFactory + JWT header inject \ud83d\udcec Messaging & Integration RabbitMQ [ ] Exchange: task.exchange [ ] Queue: task.events Azure [ ] Service Bus Queue: emailQueue [ ] Functions: onTaskAssigned , onTaskCompleted , onTaskInactive [ ] Email: SendGrid or ACS integration \ud83d\udce6 Final Tech Stack by Component Component Stack Auth Service .NET Core 8, IdentityCore, Azure SQL Task Service .NET Core 8, EF Core, RabbitMQ, Azure SQL Notification Service .NET Core 8, Azure Function, RabbitMQ, SendGrid Reminder Service Azure Function, Azure Service Bus Gateway ASP.NET Core 8 + Ocelot MVC Frontend ASP.NET Core MVC, Razor, Bootstrap \u23ed\ufe0f Kickoff [ ] Start with Step 01: Auth Service Setup","title":"\ud83e\udde0 Smart Task Management System"},{"location":"#smart-task-management-system","text":"A full-stack, production-ready Microservices-based solution powered by .NET Core 8 , Azure , RabbitMQ , IdentityCore , and ASP.NET Core MVC .","title":"\ud83e\udde0 Smart Task Management System"},{"location":"#solution-structure","text":"/SmartTaskSolution \u2502 \u251c\u2500\u2500 /Services \u2502 \u251c\u2500\u2500 /AuthService (.NET 8 + IdentityCore) \u2502 \u251c\u2500\u2500 /TaskService (.NET 8 + EF Core) \u2502 \u251c\u2500\u2500 /NotificationSvc (.NET 8 + RabbitMQ + Azure Function) \u2502 \u251c\u2500\u2500 /ReminderService (Azure Function) \u2502 \u2514\u2500\u2500 /Gateway (.NET 8 + Ocelot) \u2502 \u251c\u2500\u2500 /Frontend (ASP.NET Core MVC + Bootstrap) \u251c\u2500\u2500 /Shared (DTOs, Common Utils) \u2514\u2500\u2500 /Docs (This checklist)","title":"\ud83d\udcc1 Solution Structure"},{"location":"#microservices-api-chart","text":"Service Name Port Key Endpoints Description API Gateway 5000 /api/* Ocelot routing layer Auth Service 5001 /login , /register JwtBearer, IdentityCore Task Service 5002 /task/create , /assign , /update Task operations + RabbitMQ emit Notification Service 5003 (RabbitMQ consumer) Task notification trigger Reminder Service 5004 (Azure Bus listener) Email on task inactivity Frontend MVC 5005 /login , /dashboard , /tasks UI views with Razor & Bootstrap","title":"\ud83c\udf10 Microservices API Chart"},{"location":"#api-architecture-plan","text":"A high-level overview of how each microservice interacts in the Smart Task Management System.","title":"\ud83c\udf10 API Architecture Plan"},{"location":"#service-interaction-map-architecture-plan","text":"\ud83d\udccc Each arrow represents the direction and type of communication between services. Ports are labeled for service accessibility through the Gateway. \ud83d\udccc All services are stateless, decoupled, and accessed via the API Gateway with secure JWT tokens.","title":"\ud83d\udd01 Service Interaction Map - Architecture Plan"},{"location":"#microservices-api-endpoint-map","text":"Service Port Method Endpoint Description API Gateway 5000 ALL /api/* Aggregator & router Auth Service 5001 POST /login Authenticate & issue JWT POST /register Create user with role Task Service 5002 POST /task/create Create new task POST /task/assign Assign user to task PUT /task/status/update Update task status GET /task/{id} Get task by ID Notification Service 5003 EVENT task.events (RabbitMQ) Emits & listens to task changes Reminder Service 5004 TIMER/EVENT \u2014 Checks task inactivity Azure Function Email \u2014 TRIGGER emailQueue (Service Bus) Sends assignment/reminder email MVC Frontend 5005 GET/POST /login , /dashboard UI layer for all services \ud83d\udd12 All /api/* routes are protected via JWT and forwarded through Ocelot Gateway. RabbitMQ and Azure Service Bus operate independently of HTTP flows.","title":"\ud83d\uddfa\ufe0f Microservices (API) Endpoint Map"},{"location":"#jwt-flow-summary","text":"User logs in via /login (Auth Service) Auth Service returns JWT token with embedded claims Client sends token to Gateway Gateway forwards request with token to appropriate service","title":"\ud83d\udd10 JWT Flow Summary"},{"location":"#messaging-flow","text":"","title":"\ud83d\udcec Messaging Flow"},{"location":"#rabbitmq","text":"Producer: Task Service Exchange: task.exchange Queue: task.events Consumer: Notification Service","title":"RabbitMQ"},{"location":"#azure-service-bus","text":"Trigger: Notification or Reminder Service Queue: emailQueue Consumer: Azure Function (Email Dispatch)","title":"Azure Service Bus"},{"location":"#entity-relationship-overview-normalized-indexed","text":"\u2705 Includes primary/foreign keys, normalized entities, and suggested indexes for optimized querying.","title":"\ud83e\uddec Entity Relationship Overview: Normalized &amp; Indexed"},{"location":"#implementation-checklist","text":"","title":"\u2705 Implementation Checklist"},{"location":"#planning","text":"[ ] Define BRD and scope [ ] Design database schemas for each microservice [ ] Allocate service ports & API chart [ ] Communication breakdown map (RabbitMQ + Azure Bus)","title":"\ud83d\udcc1 Planning"},{"location":"#api-development","text":"","title":"\ud83d\udd0c API Development"},{"location":"#auth-service","text":"[ ] JwtBearer token via /login [ ] User registration /register [ ] IdentityCore setup + roles [ ] Claims embedded in token","title":"Auth Service"},{"location":"#task-service","text":"[ ] /task/create , /assign , /update [ ] Push event to RabbitMQ","title":"Task Service"},{"location":"#notification-service","text":"[ ] RabbitMQ subscription [ ] Forward to Azure Service Bus [ ] Trigger Azure Function \u2192 send email","title":"Notification Service"},{"location":"#reminder-service","text":"[ ] Track inactivity via timers/calendar [ ] Azure Bus \u2192 send reminder email","title":"Reminder Service"},{"location":"#gateway","text":"[ ] Ocelot routing + policies [ ] JWT validation","title":"Gateway"},{"location":"#frontend-mvc-app","text":"[ ] Login/Register Razor Views [ ] Bootstrap 5 theme [ ] Task dashboard & creation UI [ ] Reminder interval UI [ ] DI via IHttpClientFactory + JWT header inject","title":"\ud83c\udfa8 Frontend (MVC App)"},{"location":"#messaging-integration","text":"","title":"\ud83d\udcec Messaging &amp; Integration"},{"location":"#rabbitmq_1","text":"[ ] Exchange: task.exchange [ ] Queue: task.events","title":"RabbitMQ"},{"location":"#azure","text":"[ ] Service Bus Queue: emailQueue [ ] Functions: onTaskAssigned , onTaskCompleted , onTaskInactive [ ] Email: SendGrid or ACS integration","title":"Azure"},{"location":"#final-tech-stack-by-component","text":"Component Stack Auth Service .NET Core 8, IdentityCore, Azure SQL Task Service .NET Core 8, EF Core, RabbitMQ, Azure SQL Notification Service .NET Core 8, Azure Function, RabbitMQ, SendGrid Reminder Service Azure Function, Azure Service Bus Gateway ASP.NET Core 8 + Ocelot MVC Frontend ASP.NET Core MVC, Razor, Bootstrap","title":"\ud83d\udce6 Final Tech Stack by Component"},{"location":"#kickoff","text":"[ ] Start with Step 01: Auth Service Setup","title":"\u23ed\ufe0f Kickoff"}]}